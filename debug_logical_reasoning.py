#!/usr/bin/env python3
"""
Debug espec√≠fico para l√≥gica de racioc√≠nio
"""

import sys
import os
import cv2
import numpy as np

# Adicionar o diret√≥rio src ao path
sys.path.append('src')

from utils.debug_logger import DebugLogger
from core.intuition import IntuitionEngine

def debug_logical_reasoning(image_path: str):
    """Debug detalhado da l√≥gica de racioc√≠nio"""
    print(f"\nüß† DEBUG L√ìGICA DE RACIOC√çNIO: {os.path.basename(image_path)}")
    print("="*70)
    
    try:
        # Carregar imagem
        image = cv2.imread(image_path)
        if image is None:
            print(f"‚ùå Erro: N√£o foi poss√≠vel carregar a imagem {image_path}")
            return
            
        print(f"üìè Dimens√µes: {image.shape}")
        
        # Inicializar engine
        debug_logger = DebugLogger()
        engine = IntuitionEngine('yolov8n.pt', 'modelo_classificacao_passaros.keras', debug_logger)
        
        # An√°lise visual
        visual_analysis = engine._detect_visual_characteristics(image)
        print(f"\nüî¨ AN√ÅLISE VISUAL:")
        print(f"  üëÅÔ∏è  Olhos: {visual_analysis.get('has_eyes', False)}")
        print(f"  ü™∂ Asas: {visual_analysis.get('has_wings', False)}")
        print(f"  üê¶ Bico: {visual_analysis.get('has_beak', False)}")
        print(f"  ü™∂ Penas: {visual_analysis.get('has_feathers', False)}")
        print(f"  ü¶Ö Garras: {visual_analysis.get('has_claws', False)}")
        print(f"  üêï Mam√≠fero: {visual_analysis.get('has_mammal_features', False)}")
        print(f"  üìä Score caracter√≠sticas: {visual_analysis.get('bird_like_features', 0):.3f}")
        print(f"  üìê Score forma: {visual_analysis.get('bird_shape_score', 0):.3f}")
        print(f"  üé® Score cores: {visual_analysis.get('bird_color_score', 0):.3f}")
        
        # Caracter√≠sticas fundamentais (simulando)
        characteristics = {
            'has_wings': visual_analysis.get('has_wings', False),
            'has_beak': visual_analysis.get('has_beak', False),
            'has_feathers': visual_analysis.get('has_feathers', False),
            'has_eyes': visual_analysis.get('has_eyes', False),
            'has_claws': visual_analysis.get('has_claws', False),
            'has_mammal_features': visual_analysis.get('has_mammal_features', False),
            'has_mammal_body': False,
            'has_fur_texture': False
        }
        
        print(f"\nüß† CARACTER√çSTICAS FUNDAMENTAIS:")
        print(f"  üéØ Caracter√≠sticas: {characteristics}")
        
        # Contar caracter√≠sticas de p√°ssaro
        bird_characteristics = [characteristics['has_wings'], characteristics['has_beak'], 
                              characteristics['has_feathers'], characteristics['has_eyes'], 
                              characteristics['has_claws']]
        bird_count = sum(bird_characteristics)
        print(f"  üìä Contagem de caracter√≠sticas de p√°ssaro: {bird_count}")
        
        # Testar l√≥gica de racioc√≠nio passo a passo
        print(f"\nüîç TESTE DA L√ìGICA PASSO A PASSO:")
        
        # Regra 1: bird_count >= 3
        if bird_count >= 3:
            print(f"  ‚úÖ REGRA 1 ATIVADA: {bird_count} caracter√≠sticas >= 3")
            print(f"    ‚Üí Resultado: √â p√°ssaro (confian√ßa: 0.9)")
            return
        
        # Regra 2: bird_count >= 2 and bird_like_features > 0.4
        bird_like_features = visual_analysis.get('bird_like_features', 0)
        if bird_count >= 2 and bird_like_features > 0.4:
            print(f"  ‚úÖ REGRA 2 ATIVADA: {bird_count} caracter√≠sticas >= 2 e score {bird_like_features:.3f} > 0.4")
            print(f"    ‚Üí Resultado: √â p√°ssaro (confian√ßa: 0.8)")
            return
        
        # Regra 3: bird_count >= 1 and (bird_shape_score > 0.4 or bird_color_score > 0.4)
        bird_shape_score = visual_analysis.get('bird_shape_score', 0)
        bird_color_score = visual_analysis.get('bird_color_score', 0)
        if bird_count >= 1 and (bird_shape_score > 0.4 or bird_color_score > 0.4):
            print(f"  ‚úÖ REGRA 3 ATIVADA: {bird_count} caracter√≠sticas >= 1 e (forma {bird_shape_score:.3f} > 0.4 ou cores {bird_color_score:.3f} > 0.4)")
            print(f"    ‚Üí Resultado: √â p√°ssaro (confian√ßa: 0.7)")
            return
        
        # Regra 4: bird_like_features > 0.5 and (has_eyes or has_wings)
        if bird_like_features > 0.5 and (characteristics['has_eyes'] or characteristics['has_wings']):
            print(f"  ‚úÖ REGRA 4 ATIVADA: score {bird_like_features:.3f} > 0.5 e (olhos ou asas)")
            print(f"    ‚Üí Resultado: √â p√°ssaro (confian√ßa: 0.6)")
            return
        
        # Regra 5: bird_like_features > 0.4 and (bird_shape_score > 0.3 or bird_color_score > 0.3)
        if bird_like_features > 0.4 and (bird_shape_score > 0.3 or bird_color_score > 0.3):
            print(f"  ‚úÖ REGRA 5 ATIVADA: score {bird_like_features:.3f} > 0.4 e (forma {bird_shape_score:.3f} > 0.3 ou cores {bird_color_score:.3f} > 0.3)")
            print(f"    ‚Üí Resultado: √â p√°ssaro (confian√ßa: 0.5)")
            return
        
        # Regra 6: bird_count >= 1 or bird_like_features > 0.3
        if bird_count >= 1 or bird_like_features > 0.3:
            print(f"  ‚úÖ REGRA 6 ATIVADA: {bird_count} caracter√≠sticas >= 1 ou score {bird_like_features:.3f} > 0.3")
            print(f"    ‚Üí Resultado: √â p√°ssaro (confian√ßa: 0.4)")
            return
        
        # Regra 7: has_mammal_features and not (has_wings or has_beak or has_feathers)
        if characteristics['has_mammal_features'] and not (characteristics['has_wings'] or characteristics['has_beak'] or characteristics['has_feathers']):
            print(f"  ‚úÖ REGRA 7 ATIVADA: caracter√≠sticas de mam√≠fero e sem caracter√≠sticas de p√°ssaro")
            print(f"    ‚Üí Resultado: N√£o √© p√°ssaro (confian√ßa: 0.9)")
            return
        
        # Regra 8: Default
        print(f"  ‚ùå NENHUMA REGRA ATIVADA - Default")
        print(f"    ‚Üí Resultado: N√£o √© p√°ssaro (confian√ßa: 0.2)")
        
    except Exception as e:
        print(f"‚ùå Erro no debug: {str(e)}")

def main():
    """Fun√ß√£o principal"""
    print("üß† DEBUG L√ìGICA DE RACIOC√çNIO")
    print("="*70)
    
    # Testar com p√°ssaro azul
    test_images = [
        'test_bird.jpg',  # P√°ssaro azul
        '/Users/matheusferreira/Downloads/triste-cachorro.jpg'  # Cachorro
    ]
    
    for image_path in test_images:
        if os.path.exists(image_path):
            debug_logical_reasoning(image_path)
        else:
            print(f"‚ö†Ô∏è  Imagem n√£o encontrada: {image_path}")

if __name__ == "__main__":
    main()
