#!/usr/bin/env python3
"""
Teste de Caixa Preta - Sistema de Identifica√ß√£o de P√°ssaros
Testa funcionalidades sem conhecimento interno do sistema
"""

import requests
import time
import json
import os
import sys
from datetime import datetime
from PIL import Image
import io
import base64

class BlackBoxTester:
    def __init__(self, base_url="http://localhost:8501"):
        self.base_url = base_url
        self.results = []
        
    def log_test(self, test_name, status, details=""):
        """Registrar resultado do teste"""
        result = {
            "test": test_name,
            "status": status,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        self.results.append(result)
        
        status_icon = "‚úÖ" if status == "PASS" else "‚ùå" if status == "FAIL" else "‚ö†Ô∏è"
        print(f"{status_icon} {test_name}: {status}")
        if details:
            print(f"   üìù {details}")
    
    def test_interface_elements(self):
        """Teste 1: Elementos da interface"""
        try:
            response = requests.get(self.base_url, timeout=10)
            content = response.text
            
            # Verificar elementos essenciais da interface
            interface_elements = [
                "streamlit",
                "tabs",
                "sidebar",
                "button",
                "upload"
            ]
            
            found_elements = [elem for elem in interface_elements if elem in content.lower()]
            
            if len(found_elements) >= 3:
                self.log_test("Elementos da Interface", "PASS", f"Encontrados: {found_elements}")
                return True
            else:
                self.log_test("Elementos da Interface", "FAIL", f"Encontrados apenas: {found_elements}")
                return False
        except Exception as e:
            self.log_test("Elementos da Interface", "FAIL", str(e))
            return False
    
    def test_navigation_tabs(self):
        """Teste 2: Navega√ß√£o entre tabs"""
        try:
            response = requests.get(self.base_url, timeout=10)
            content = response.text
            
            # Verificar se h√° m√∫ltiplas tabs
            tab_count = content.count('data-baseweb="tab"')
            
            if tab_count >= 5:
                self.log_test("Navega√ß√£o entre Tabs", "PASS", f"{tab_count} tabs encontradas")
                return True
            else:
                self.log_test("Navega√ß√£o entre Tabs", "FAIL", f"Apenas {tab_count} tabs encontradas")
                return False
        except Exception as e:
            self.log_test("Navega√ß√£o entre Tabs", "FAIL", str(e))
            return False
    
    def test_file_upload_interface(self):
        """Teste 3: Interface de upload de arquivo"""
        try:
            response = requests.get(self.base_url, timeout=10)
            content = response.text
            
            # Verificar elementos de upload
            upload_elements = [
                "file_uploader",
                "upload",
                "input",
                "type="
            ]
            
            found_elements = [elem for elem in upload_elements if elem in content.lower()]
            
            if len(found_elements) >= 2:
                self.log_test("Interface de Upload", "PASS", f"Elementos encontrados: {found_elements}")
                return True
            else:
                self.log_test("Interface de Upload", "FAIL", f"Elementos insuficientes: {found_elements}")
                return False
        except Exception as e:
            self.log_test("Interface de Upload", "FAIL", str(e))
            return False
    
    def test_responsive_layout(self):
        """Teste 4: Layout responsivo"""
        try:
            response = requests.get(self.base_url, timeout=10)
            content = response.text
            
            # Verificar CSS responsivo
            responsive_elements = [
                "media query",
                "max-width",
                "flex",
                "responsive",
                "mobile"
            ]
            
            found_elements = [elem for elem in responsive_elements if elem in content.lower()]
            
            if len(found_elements) >= 2:
                self.log_test("Layout Responsivo", "PASS", f"Elementos CSS encontrados: {found_elements}")
                return True
            else:
                self.log_test("Layout Responsivo", "FAIL", f"Elementos CSS insuficientes: {found_elements}")
                return False
        except Exception as e:
            self.log_test("Layout Responsivo", "FAIL", str(e))
            return False
    
    def test_error_handling_ui(self):
        """Teste 5: Tratamento de erros na UI"""
        try:
            response = requests.get(self.base_url, timeout=10)
            content = response.text
            
            # Verificar elementos de tratamento de erro
            error_elements = [
                "error",
                "exception",
                "try",
                "catch",
                "alert"
            ]
            
            found_elements = [elem for elem in error_elements if elem in content.lower()]
            
            if len(found_elements) >= 1:
                self.log_test("Tratamento de Erros UI", "PASS", f"Elementos encontrados: {found_elements}")
                return True
            else:
                self.log_test("Tratamento de Erros UI", "WARN", "Nenhum elemento de erro encontrado")
                return False
        except Exception as e:
            self.log_test("Tratamento de Erros UI", "FAIL", str(e))
            return False
    
    def test_data_visualization(self):
        """Teste 6: Visualiza√ß√£o de dados"""
        try:
            response = requests.get(self.base_url, timeout=10)
            content = response.text
            
            # Verificar elementos de visualiza√ß√£o
            viz_elements = [
                "plotly",
                "chart",
                "graph",
                "metric",
                "dataframe"
            ]
            
            found_elements = [elem for elem in viz_elements if elem in content.lower()]
            
            if len(found_elements) >= 2:
                self.log_test("Visualiza√ß√£o de Dados", "PASS", f"Elementos encontrados: {found_elements}")
                return True
            else:
                self.log_test("Visualiza√ß√£o de Dados", "FAIL", f"Elementos insuficientes: {found_elements}")
                return False
        except Exception as e:
            self.log_test("Visualiza√ß√£o de Dados", "FAIL", str(e))
            return False
    
    def test_user_interaction_elements(self):
        """Teste 7: Elementos de intera√ß√£o do usu√°rio"""
        try:
            response = requests.get(self.base_url, timeout=10)
            content = response.text
            
            # Verificar elementos de intera√ß√£o
            interaction_elements = [
                "button",
                "click",
                "select",
                "input",
                "form"
            ]
            
            found_elements = [elem for elem in interaction_elements if elem in content.lower()]
            
            if len(found_elements) >= 3:
                self.log_test("Elementos de Intera√ß√£o", "PASS", f"Elementos encontrados: {found_elements}")
                return True
            else:
                self.log_test("Elementos de Intera√ß√£o", "FAIL", f"Elementos insuficientes: {found_elements}")
                return False
        except Exception as e:
            self.log_test("Elementos de Intera√ß√£o", "FAIL", str(e))
            return False
    
    def test_accessibility_features(self):
        """Teste 8: Recursos de acessibilidade"""
        try:
            response = requests.get(self.base_url, timeout=10)
            content = response.text
            
            # Verificar elementos de acessibilidade
            accessibility_elements = [
                "alt=",
                "title=",
                "aria-",
                "role=",
                "label"
            ]
            
            found_elements = [elem for elem in accessibility_elements if elem in content.lower()]
            
            if len(found_elements) >= 1:
                self.log_test("Recursos de Acessibilidade", "PASS", f"Elementos encontrados: {found_elements}")
                return True
            else:
                self.log_test("Recursos de Acessibilidade", "WARN", "Nenhum elemento de acessibilidade encontrado")
                return False
        except Exception as e:
            self.log_test("Recursos de Acessibilidade", "FAIL", str(e))
            return False
    
    def test_performance_indicators(self):
        """Teste 9: Indicadores de performance"""
        try:
            start_time = time.time()
            response = requests.get(self.base_url, timeout=30)
            end_time = time.time()
            
            response_time = end_time - start_time
            content_size = len(response.content)
            
            # Verificar se h√° indicadores de performance na p√°gina
            performance_elements = [
                "loading",
                "spinner",
                "progress",
                "timeout"
            ]
            
            found_elements = [elem for elem in performance_elements if elem in response.text.lower()]
            
            if response_time < 5 and content_size > 1000:
                self.log_test("Indicadores de Performance", "PASS", f"Tempo: {response_time:.2f}s, Tamanho: {content_size} bytes")
                return True
            else:
                self.log_test("Indicadores de Performance", "FAIL", f"Tempo: {response_time:.2f}s, Tamanho: {content_size} bytes")
                return False
        except Exception as e:
            self.log_test("Indicadores de Performance", "FAIL", str(e))
            return False
    
    def test_security_indicators(self):
        """Teste 10: Indicadores de seguran√ßa"""
        try:
            response = requests.get(self.base_url, timeout=10)
            
            # Verificar cabe√ßalhos de seguran√ßa
            security_headers = [
                "X-Content-Type-Options",
                "X-Frame-Options",
                "X-XSS-Protection",
                "Content-Security-Policy"
            ]
            
            found_headers = [h for h in security_headers if h in response.headers]
            
            # Verificar se n√£o h√° informa√ß√µes sens√≠veis expostas
            content = response.text.lower()
            sensitive_info = [
                "password",
                "secret",
                "key",
                "token",
                "api_key"
            ]
            
            exposed_info = [info for info in sensitive_info if info in content]
            
            if len(found_headers) >= 0 and len(exposed_info) == 0:
                self.log_test("Indicadores de Seguran√ßa", "PASS", f"Cabe√ßalhos: {len(found_headers)}, Info exposta: {len(exposed_info)}")
                return True
            else:
                self.log_test("Indicadores de Seguran√ßa", "WARN", f"Cabe√ßalhos: {len(found_headers)}, Info exposta: {exposed_info}")
                return False
        except Exception as e:
            self.log_test("Indicadores de Seguran√ßa", "FAIL", str(e))
            return False
    
    def run_all_tests(self):
        """Executar todos os testes de caixa preta"""
        print("üñ§ INICIANDO TESTES DE CAIXA PRETA")
        print("=" * 60)
        
        tests = [
            self.test_interface_elements,
            self.test_navigation_tabs,
            self.test_file_upload_interface,
            self.test_responsive_layout,
            self.test_error_handling_ui,
            self.test_data_visualization,
            self.test_user_interaction_elements,
            self.test_accessibility_features,
            self.test_performance_indicators,
            self.test_security_indicators
        ]
        
        passed = 0
        failed = 0
        warned = 0
        
        for test in tests:
            try:
                result = test()
                if result:
                    passed += 1
                else:
                    failed += 1
            except Exception as e:
                self.log_test(test.__name__, "FAIL", str(e))
                failed += 1
            
            time.sleep(0.5)  # Pausa entre testes
        
        # Resumo
        print("\n" + "=" * 60)
        print("üìä RESUMO DOS TESTES DE CAIXA PRETA")
        print("=" * 60)
        print(f"‚úÖ Passou: {passed}")
        print(f"‚ùå Falhou: {failed}")
        print(f"‚ö†Ô∏è Avisos: {warned}")
        print(f"üìà Taxa de Sucesso: {(passed/(passed+failed)*100):.1f}%")
        
        # Salvar resultados
        self.save_results()
        
        return passed, failed, warned
    
    def save_results(self):
        """Salvar resultados em arquivo JSON"""
        try:
            with open("test_results_black_box.json", "w") as f:
                json.dump(self.results, f, indent=2, ensure_ascii=False)
            print(f"\nüíæ Resultados salvos em: test_results_black_box.json")
        except Exception as e:
            print(f"‚ùå Erro ao salvar resultados: {e}")

def main():
    """Fun√ß√£o principal"""
    print("üñ§ TESTE DE CAIXA PRETA - SISTEMA DE IDENTIFICA√á√ÉO DE P√ÅSSAROS")
    print("=" * 70)
    
    tester = BlackBoxTester()
    
    try:
        passed, failed, warned = tester.run_all_tests()
        
        if failed == 0:
            print("\nüéâ TODOS OS TESTES DE CAIXA PRETA PASSARAM!")
            sys.exit(0)
        else:
            print(f"\n‚ö†Ô∏è {failed} TESTES DE CAIXA PRETA FALHARAM")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Testes interrompidos pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
